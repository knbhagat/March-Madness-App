"""
This module provides functionality to score a March Madness bracket by comparing
a userâ€™s picks with the actual results:
    - 10 points for each correct pick in the First Round
    - 20 for Second Round
    - 40 for Sweet 16
    - 80 for Elite 8
    - 160 for Final 4
    - 320 for Championship

Both the user and actual bracket JSONs can be structured in two ways:
1. A complete rounds-based bracket with a "rounds" key, where rounds such as \"First Round\",
   \"Second Round\", etc., are available.
2. A region-based bracket (as generated by bracket.py) with a \"regions\" key.
   In this case, it is assumed that the provided games represent only the First Round.

If a game in the actual bracket does not yet have a winner (i.e. the game is unfinished),
no points are added.
"""

# Points awarded per round
ROUND_POINTS = {
    "First Round": 10,
    "Second Round": 20,
    "Sweet 16": 40,
    "Elite 8": 80,
    "Final 4": 160,
    "Championship": 320
}

def extract_rounds(bracket):
    """
    Convert the bracket JSON into a rounds-based structure.
    
    If the bracket already has a "rounds" key, return it directly.
    If the bracket only has a "regions" key, assume the games listed in all regions
    belong to the First Round.
    """
    if "rounds" in bracket:
        # Bracket already in rounds-based format
        return bracket["rounds"]
    elif "regions" in bracket:
        # Combine all games from each region into a single list for First Round
        first_round_games = []
        for region_games in bracket["regions"].values():
            first_round_games.extend(region_games)
        return {"First Round": first_round_games}
    else:
        # Unknown format;
        return {}

def score_bracket(user_bracket, actual_bracket):
    """
    Calculate the score for a user's bracket based on the actual results.
    
    This function first extracts the rounds from the bracket JSONs. It then
    iterates over each round defined in ROUND_POINTS. For each game in a round,
    if the actual game has a winner and the user's pick matches that winner,
    the corresponding points are awarded.
    """
    score = 0
    
    user_rounds = extract_rounds(user_bracket)
    actual_rounds = extract_rounds(actual_bracket)
    
    for round_name, points in ROUND_POINTS.items():
        user_games = user_rounds.get(round_name, [])
        actual_games = actual_rounds.get(round_name, [])
        
        # Pair games by index; if one round has fewer games, only compare available pairs.
        for user_game, actual_game in zip(user_games, actual_games):
            # Only score finished games that have a winner
            if actual_game.get("winner") is not None:
                if user_game.get("winner") == actual_game.get("winner"):
                    score += points
    return score

